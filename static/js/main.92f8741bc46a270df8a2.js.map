{"version":3,"sources":["webpack:///./static/index.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yFAAyF;AAC9F,KAAK,qFAAqF;AAC1F,KAAK,iFAAiF;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,GAAG,iDAAiD;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvfile":"static/js/main.92f8741bc46a270df8a2.js","sourcesContent":["/**\n * Created by kungfucode on 17/9/19.\n */\nwindow.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB\n// 之前的版本信息\nvar oldVersions = {}\n// 定义数据信息\nvar X2DBBgResources = {\n  name: 'X2DB',\n  storeName: 'bgResources',\n  version: 1511789169,// 每次发版都会生成一个新的数据库版本(时间戳秒数)\n  db: null,\n  resourcesArr: [\n    // id 是indexedDB中的keyPath\n    // url 会换成新的hashUrl\n    // type style:样式文件, script:脚本文件\n    // 这里的顺序就是资源在页面加载的顺序\n    {id: 'app.css', url: 'static/css/app.807f67d930118cd002912eb7ccdac0df.css', type: 'style'},\n    {id: 'manifest.js', url: 'static/js/manifest.a330e418c234cee719a7.js', type: 'script'},\n    {id: 'vendor.js', url: 'static/js/vendor.90de790a6c0c49e41b1b.js', type: 'script'},\n    {id: 'app.js', url: 'static/js/app.3e19129f9f7af728781e.js', type: 'script'}\n  ]\n}\n// 是否需要更新版本, 如果需要更新的话, 不会去使用数据库中的资源到页面\nvar needUpdate = false\n// 创建一个XHR对象, 用于封装AJAX请求\nfunction createXHR () {\n  if (typeof XMLHttpRequest !== 'undefined') { // 非IE6浏览器\n    return new XMLHttpRequest()\n  } else if (typeof ActiveXObject !== 'undefined') {   // IE6浏览器\n    var version = [\n      'MSXML2.XMLHttp.6.0',\n      'MSXML2.XMLHttp.3.0',\n      'MSXML2.XMLHttp'\n    ]\n    for (var i = 0; i < version.length; i++) {\n      try {\n// eslint-disable-next-line no-undef\n        return new ActiveXObject(version[i])\n      } catch (e) {\n        // 跳过\n      }\n    }\n  } else {\n    throw new Error('您的系统或浏览器不支持XHR对象！')\n  }\n}\n// 转义字符\nfunction params (data) {\n  var arr = []\n  for (var i in data) {\n    arr.push(encodeURIComponent(i) + '=' + encodeURIComponent(data[i]))\n  }\n  return arr.join('&')\n}\n// 封装ajax\nfunction x2Ajax (obj) {\n  var xhr = createXHR()\n  obj.url = obj.url + '?rand=' + Math.random() // 清除缓存\n  obj.data = params(obj.data)      // 转义字符串\n  if (obj.method === 'get') {      // 判断使用的是否是get方式发送\n    obj.url += obj.url.indexOf('?') === -1 ? '?' + obj.data : '&' + obj.data\n  }\n  // 异步\n  if (obj.async === true) {\n    // 异步的时候需要触发onreadystatechange事件\n    xhr.onreadystatechange = function () {\n      // 执行完成\n      if (xhr.readyState === 4) {\n        callBack()\n      }\n    }\n  }\n  xhr.open(obj.method, obj.url, obj.async)\n  if (obj.method === 'post') {\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n    xhr.send(obj.data)\n  } else {\n    xhr.send(null)\n  }\n  // xhr.abort(); // 取消异步请求\n  // 同步\n  if (obj.async === false) {\n    callBack()\n  }\n  // 返回数据\n  function callBack () {\n    // 判断是否返回正确\n    if (xhr.status === 200) {\n      obj.success(xhr.responseText)\n    } else {\n      obj.Error('获取数据失败，错误代号为：' + xhr.status + '错误信息为：' + xhr.statusText)\n    }\n  }\n}\n// 数据库工具类\nvar DBUtil = {\n  openDB: function (DBInfo, successCB) {\n    var requestDB = window.indexedDB.open(DBInfo.name, DBInfo.version)\n    requestDB.onsuccess = function (e) {\n      DBInfo.db = e.target.result\n      successCB()\n    }\n    requestDB.onerror = function (e) {\n      console.log(e.currentTarget.error.message)\n    }\n    requestDB.onupgradeneeded = function (e) {\n      needUpdate = true\n      console.log('更新版本')\n      var db = e.target.result\n      // 如果没有表, 则初始化\n      if (!db.objectStoreNames.contains(DBInfo.storeName)) {\n        db.createObjectStore(DBInfo.storeName, {keyPath: 'id'})\n      }\n      let img = document.createElement('img')\n      img.src = '/static/images/view-loader.gif'\n      let p = document.createElement('p')\n      p.id = 'updateInfo'\n      p.innerHTML = '数据更新中......'\n      let div = document.createElement('div')\n      div.style.width = '100%'\n      div.style.height = '100%'\n      div.style.display = 'flex'\n      div.style.justifyContent = 'center'\n      div.style.alignItems = 'center'\n      div.style.flexDirection = 'column'\n      div.appendChild(img)\n      div.appendChild(p)\n      document.body.appendChild(div)\n      // 重新装载数据\n      loadResources(DBInfo.resourcesArr, function () {\n        let p = document.getElementById('updateInfo')\n        p.innerHTML = '数据更新成功^_^!'\n        p.style.color = 'green'\n        console.log('版本成功更新为:' + db.version)\n        // 资源更新后重新加载页面, 留一秒钟, 怕数据没有完全入库时页面刷新\n        setTimeout(function () {\n          window.location.reload()\n        }, 1000)\n      })\n    }\n  },\n  // 往数据库 db 里的\"表\" storeName 中, 加入数组 dataArr 中的数据\n  addData: function (db, storeName, dataArr) {\n    var transaction = db.transaction(storeName, 'readwrite')\n    var store = transaction.objectStore(storeName)\n    for (var i = 0; i < dataArr.length; i++) {\n      store.put(dataArr[i])\n    }\n  },\n  closeDB: function (db) {\n    db.close()\n  },\n  deleteDB: function (name) {\n    indexedDB.deleteDatabase(name)\n  },\n  getDataByKey: function (db, storeName, key, successCB) {\n    var transaction = db.transaction(storeName, 'readwrite')\n    var store = transaction.objectStore(storeName)\n    var request = store.get(key)\n    request.onsuccess = function (e) {\n      successCB(e.target.result)\n    }\n  }\n}\n\n// 请求资源到本地数组\nfunction loadResources (resourcesArr, successCB) {\n  // 定义需要更新的资源数组\n  let needUpdateFiles = []\n  resourcesArr.forEach(item => {\n    // 跟旧版本的资源比较, 如果url不一样, 就加到待更新资源数组里\n    if (item.url !== oldVersions[item.id]) {\n      needUpdateFiles.push(item)\n    }\n  })\n  // 定义请求的次数\n  let count = 0\n  needUpdateFiles.forEach(item => {\n    x2Ajax({\n      url: item.url,\n      method: 'get',\n      async: true,\n      success: function (data) {\n        console.log('请求 ' + item.id + ' 成功')\n        item.data = data\n        count = count + 1\n        // 从url加载资源完毕, 即请求成功的次数等于更新资源数\n        if (count === needUpdateFiles.length) {\n          console.log('请求资源完成')\n          // 如果支持indexedDB, 则将新的数据存储到数据库\n          if (window.indexedDB) {\n            DBUtil.addData(X2DBBgResources.db, 'bgResources', needUpdateFiles)\n          }\n          successCB()\n        }\n      },\n      Error: function (error) {\n        DBUtil.deleteDB(X2DBBgResources.name)\n      }\n    })\n  })\n}\n// 将资源加载到页面\nfunction loadResourcesToDocument (resourcesArr) {\n  resourcesArr.forEach(item => {\n    if (item.type === 'style') {\n      let styleNode = document.createElement('style')\n      styleNode.innerHTML = item.data\n      document.head.appendChild(styleNode)\n    } else if (item.type === 'script') {\n// eslint-disable-next-line no-eval\n      eval(item.data)\n    }\n  })\n}\nfunction useIndexedDBData () {\n  // 直接获取数据库里的数据\n  DBUtil.openDB(X2DBBgResources, function () {\n    console.log('读取数据')\n    // 如果资源版本需要更新,则先不去数据库读取资源\n    if (needUpdate) return\n    // 假设读取数据库时没有发生错误\n    let hasError = false\n    X2DBBgResources.resourcesArr.forEach((item, index) => {\n      !hasError && DBUtil.getDataByKey(X2DBBgResources.db, X2DBBgResources.storeName, item.id, function (data) {\n        try {\n          // 将数据库的数据先存储到 X2DBBgResources.resourcesArr\n          item.data = data.data\n          if (index === X2DBBgResources.resourcesArr.length - 1) {\n            // 将数据全部读取时, 将其加到页面中\n            loadResourcesToDocument(X2DBBgResources.resourcesArr)\n          }\n        } catch (e) {\n          console.log('离线资源 ' + item.id + ' 损坏')\n          hasError = true\n        } finally {\n          // 遍历到最后\n          if (index === X2DBBgResources.resourcesArr.length - 1) {\n            // 如果有错误\n            if (hasError) {\n              // 删掉数据库重新加载页面请求数据\n              DBUtil.deleteDB(X2DBBgResources.name)\n              let reloadLink = document.createElement('a')\n              reloadLink.innerHTML = '点击重试'\n              reloadLink.onclick = function () {\n                window.location.reload()\n              }\n              document.body.appendChild(reloadLink)\n            }\n          }\n        }\n      })\n    })\n  })\n}\n// 程序入口:判断是否支持indexedDB\nif (window.indexedDB) {\n  // 获取之前的版本信息\n  var requestDB = window.indexedDB.open(X2DBBgResources.name)\n  requestDB.onsuccess = function (e) {\n    let db = e.target.result\n    var transaction = db.transaction(X2DBBgResources.storeName, 'readwrite')\n    var store = transaction.objectStore(X2DBBgResources.storeName)\n    let count = 0\n    X2DBBgResources.resourcesArr.forEach(item => {\n      var request = store.get(item.id)\n      request.onsuccess = function (e) {\n        oldVersions[item.id] = e.target.result.url\n        count++\n        if (count === X2DBBgResources.resourcesArr.length) {\n          console.log('获取版本信息成功:')\n          console.log(oldVersions)\n          db.close()\n          useIndexedDBData()\n        }\n      }\n    })\n  }\n  requestDB.onupgradeneeded = function (e) {\n    var db = e.target.result\n    // 如果走到这里说明还没有数据库, 则不用判断旧版本\n    db.close()\n    useIndexedDBData()\n  }\n} else {\n  loadResources(X2DBBgResources.resourcesArr, function () {\n    loadResourcesToDocument(X2DBBgResources.resourcesArr)\n  })\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./static/index.js\n// module id = 216\n// module chunks = 2"],"sourceRoot":""}