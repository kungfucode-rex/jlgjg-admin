{"version":3,"sources":["webpack:///./static/index.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,yFAAyF;AAC9F,KAAK,qFAAqF;AAC1F,KAAK,iFAAiF;AACtF,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,GAAG,iDAAiD;AACpD;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvfile":"static/js/main.598da8157b644a9e3a66.js","sourcesContent":["/**\r\n * Created by kungfucode on 17/9/19.\r\n */\r\nwindow.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB\r\n// 之前的版本信息\r\nvar oldVersions = {}\r\n// 定义数据信息\r\nvar X2DBBgResources = {\r\n  name: 'X2DB',\r\n  storeName: 'bgResources',\r\n  version: 1506494961,// 每次发版都会生成一个新的数据库版本(时间戳秒数)\r\n  db: null,\r\n  resourcesArr: [\r\n    // id 是indexedDB中的keyPath\r\n    // url 会换成新的hashUrl\r\n    // type style:样式文件, script:脚本文件\r\n    // 这里的顺序就是资源在页面加载的顺序\r\n    {id: 'app.css', url: 'static/css/app.f82144c9f0dbbb89c53b613617e86230.css', type: 'style'},\r\n    {id: 'manifest.js', url: 'static/js/manifest.f7e315f93cee47cc34ec.js', type: 'script'},\r\n    {id: 'vendor.js', url: 'static/js/vendor.2baba81aaa0dc66a5bb8.js', type: 'script'},\r\n    {id: 'app.js', url: 'static/js/app.bc9771c73c43c673a0cd.js', type: 'script'}\r\n  ]\r\n}\r\n// 是否需要更新版本, 如果需要更新的话, 不会去使用数据库中的资源到页面\r\nvar needUpdate = false\r\n// 创建一个XHR对象, 用于封装AJAX请求\r\nfunction createXHR () {\r\n  if (typeof XMLHttpRequest !== 'undefined') { // 非IE6浏览器\r\n    return new XMLHttpRequest()\r\n  } else if (typeof ActiveXObject !== 'undefined') {   // IE6浏览器\r\n    var version = [\r\n      'MSXML2.XMLHttp.6.0',\r\n      'MSXML2.XMLHttp.3.0',\r\n      'MSXML2.XMLHttp'\r\n    ]\r\n    for (var i = 0; i < version.length; i++) {\r\n      try {\r\n// eslint-disable-next-line no-undef\r\n        return new ActiveXObject(version[i])\r\n      } catch (e) {\r\n        // 跳过\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error('您的系统或浏览器不支持XHR对象！')\r\n  }\r\n}\r\n// 转义字符\r\nfunction params (data) {\r\n  var arr = []\r\n  for (var i in data) {\r\n    arr.push(encodeURIComponent(i) + '=' + encodeURIComponent(data[i]))\r\n  }\r\n  return arr.join('&')\r\n}\r\n// 封装ajax\r\nfunction x2Ajax (obj) {\r\n  var xhr = createXHR()\r\n  obj.url = obj.url + '?rand=' + Math.random() // 清除缓存\r\n  obj.data = params(obj.data)      // 转义字符串\r\n  if (obj.method === 'get') {      // 判断使用的是否是get方式发送\r\n    obj.url += obj.url.indexOf('?') === -1 ? '?' + obj.data : '&' + obj.data\r\n  }\r\n  // 异步\r\n  if (obj.async === true) {\r\n    // 异步的时候需要触发onreadystatechange事件\r\n    xhr.onreadystatechange = function () {\r\n      // 执行完成\r\n      if (xhr.readyState === 4) {\r\n        callBack()\r\n      }\r\n    }\r\n  }\r\n  xhr.open(obj.method, obj.url, obj.async)\r\n  if (obj.method === 'post') {\r\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\r\n    xhr.send(obj.data)\r\n  } else {\r\n    xhr.send(null)\r\n  }\r\n  // xhr.abort(); // 取消异步请求\r\n  // 同步\r\n  if (obj.async === false) {\r\n    callBack()\r\n  }\r\n  // 返回数据\r\n  function callBack () {\r\n    // 判断是否返回正确\r\n    if (xhr.status === 200) {\r\n      obj.success(xhr.responseText)\r\n    } else {\r\n      obj.Error('获取数据失败，错误代号为：' + xhr.status + '错误信息为：' + xhr.statusText)\r\n    }\r\n  }\r\n}\r\n// 数据库工具类\r\nvar DBUtil = {\r\n  openDB: function (DBInfo, successCB) {\r\n    var requestDB = window.indexedDB.open(DBInfo.name, DBInfo.version)\r\n    requestDB.onsuccess = function (e) {\r\n      DBInfo.db = e.target.result\r\n      successCB()\r\n    }\r\n    requestDB.onerror = function (e) {\r\n      console.log(e.currentTarget.error.message)\r\n    }\r\n    requestDB.onupgradeneeded = function (e) {\r\n      needUpdate = true\r\n      console.log('更新版本')\r\n      var db = e.target.result\r\n      // 如果没有表, 则初始化\r\n      if (!db.objectStoreNames.contains(DBInfo.storeName)) {\r\n        db.createObjectStore(DBInfo.storeName, {keyPath: 'id'})\r\n      }\r\n      let img = document.createElement('img')\r\n      img.src = '/static/images/view-loader.gif'\r\n      let p = document.createElement('p')\r\n      p.id = 'updateInfo'\r\n      p.innerHTML = '数据更新中......'\r\n      let div = document.createElement('div')\r\n      div.style.width = '100%'\r\n      div.style.height = '100%'\r\n      div.style.display = 'flex'\r\n      div.style.justifyContent = 'center'\r\n      div.style.alignItems = 'center'\r\n      div.style.flexDirection = 'column'\r\n      div.appendChild(img)\r\n      div.appendChild(p)\r\n      document.body.appendChild(div)\r\n      // 重新装载数据\r\n      loadResources(DBInfo.resourcesArr, function () {\r\n        let p = document.getElementById('updateInfo')\r\n        p.innerHTML = '数据更新成功^_^!'\r\n        p.style.color = 'green'\r\n        console.log('版本成功更新为:' + db.version)\r\n        // 资源更新后重新加载页面, 留一秒钟, 怕数据没有完全入库时页面刷新\r\n        setTimeout(function () {\r\n          window.location.reload()\r\n        }, 1000)\r\n      })\r\n    }\r\n  },\r\n  // 往数据库 db 里的\"表\" storeName 中, 加入数组 dataArr 中的数据\r\n  addData: function (db, storeName, dataArr) {\r\n    var transaction = db.transaction(storeName, 'readwrite')\r\n    var store = transaction.objectStore(storeName)\r\n    for (var i = 0; i < dataArr.length; i++) {\r\n      store.put(dataArr[i])\r\n    }\r\n  },\r\n  closeDB: function (db) {\r\n    db.close()\r\n  },\r\n  deleteDB: function (name) {\r\n    indexedDB.deleteDatabase(name)\r\n  },\r\n  getDataByKey: function (db, storeName, key, successCB) {\r\n    var transaction = db.transaction(storeName, 'readwrite')\r\n    var store = transaction.objectStore(storeName)\r\n    var request = store.get(key)\r\n    request.onsuccess = function (e) {\r\n      successCB(e.target.result)\r\n    }\r\n  }\r\n}\r\n\r\n// 请求资源到本地数组\r\nfunction loadResources (resourcesArr, successCB) {\r\n  // 定义需要更新的资源数组\r\n  let needUpdateFiles = []\r\n  resourcesArr.forEach(item => {\r\n    // 跟旧版本的资源比较, 如果url不一样, 就加到待更新资源数组里\r\n    if (item.url !== oldVersions[item.id]) {\r\n      needUpdateFiles.push(item)\r\n    }\r\n  })\r\n  // 定义请求的次数\r\n  let count = 0\r\n  needUpdateFiles.forEach(item => {\r\n    x2Ajax({\r\n      url: item.url,\r\n      method: 'get',\r\n      async: true,\r\n      success: function (data) {\r\n        console.log('请求 ' + item.id + ' 成功')\r\n        item.data = data\r\n        count = count + 1\r\n        // 从url加载资源完毕, 即请求成功的次数等于更新资源数\r\n        if (count === needUpdateFiles.length) {\r\n          console.log('请求资源完成')\r\n          // 如果支持indexedDB, 则将新的数据存储到数据库\r\n          if (window.indexedDB) {\r\n            DBUtil.addData(X2DBBgResources.db, 'bgResources', needUpdateFiles)\r\n          }\r\n          successCB()\r\n        }\r\n      },\r\n      Error: function (error) {\r\n        DBUtil.deleteDB(X2DBBgResources.name)\r\n      }\r\n    })\r\n  })\r\n}\r\n// 将资源加载到页面\r\nfunction loadResourcesToDocument (resourcesArr) {\r\n  resourcesArr.forEach(item => {\r\n    if (item.type === 'style') {\r\n      let styleNode = document.createElement('style')\r\n      styleNode.innerHTML = item.data\r\n      document.head.appendChild(styleNode)\r\n    } else if (item.type === 'script') {\r\n// eslint-disable-next-line no-eval\r\n      eval(item.data)\r\n    }\r\n  })\r\n}\r\nfunction useIndexedDBData () {\r\n  // 直接获取数据库里的数据\r\n  DBUtil.openDB(X2DBBgResources, function () {\r\n    console.log('读取数据')\r\n    // 如果资源版本需要更新,则先不去数据库读取资源\r\n    if (needUpdate) return\r\n    // 假设读取数据库时没有发生错误\r\n    let hasError = false\r\n    X2DBBgResources.resourcesArr.forEach((item, index) => {\r\n      !hasError && DBUtil.getDataByKey(X2DBBgResources.db, X2DBBgResources.storeName, item.id, function (data) {\r\n        try {\r\n          // 将数据库的数据先存储到 X2DBBgResources.resourcesArr\r\n          item.data = data.data\r\n          if (index === X2DBBgResources.resourcesArr.length - 1) {\r\n            // 将数据全部读取时, 将其加到页面中\r\n            loadResourcesToDocument(X2DBBgResources.resourcesArr)\r\n          }\r\n        } catch (e) {\r\n          console.log('离线资源 ' + item.id + ' 损坏')\r\n          hasError = true\r\n        } finally {\r\n          // 遍历到最后\r\n          if (index === X2DBBgResources.resourcesArr.length - 1) {\r\n            // 如果有错误\r\n            if (hasError) {\r\n              // 删掉数据库重新加载页面请求数据\r\n              DBUtil.deleteDB(X2DBBgResources.name)\r\n              let reloadLink = document.createElement('a')\r\n              reloadLink.innerHTML = '点击重试'\r\n              reloadLink.onclick = function () {\r\n                window.location.reload()\r\n              }\r\n              document.body.appendChild(reloadLink)\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n  })\r\n}\r\n// 程序入口:判断是否支持indexedDB\r\nif (window.indexedDB) {\r\n  // 获取之前的版本信息\r\n  var requestDB = window.indexedDB.open(X2DBBgResources.name)\r\n  requestDB.onsuccess = function (e) {\r\n    let db = e.target.result\r\n    var transaction = db.transaction(X2DBBgResources.storeName, 'readwrite')\r\n    var store = transaction.objectStore(X2DBBgResources.storeName)\r\n    let count = 0\r\n    X2DBBgResources.resourcesArr.forEach(item => {\r\n      var request = store.get(item.id)\r\n      request.onsuccess = function (e) {\r\n        oldVersions[item.id] = e.target.result.url\r\n        count++\r\n        if (count === X2DBBgResources.resourcesArr.length) {\r\n          console.log('获取版本信息成功:')\r\n          console.log(oldVersions)\r\n          db.close()\r\n          useIndexedDBData()\r\n        }\r\n      }\r\n    })\r\n  }\r\n  requestDB.onupgradeneeded = function (e) {\r\n    var db = e.target.result\r\n    // 如果走到这里说明还没有数据库, 则不用判断旧版本\r\n    db.close()\r\n    useIndexedDBData()\r\n  }\r\n} else {\r\n  loadResources(X2DBBgResources.resourcesArr, function () {\r\n    loadResourcesToDocument(X2DBBgResources.resourcesArr)\r\n  })\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./static/index.js\n// module id = 216\n// module chunks = 2"],"sourceRoot":""}